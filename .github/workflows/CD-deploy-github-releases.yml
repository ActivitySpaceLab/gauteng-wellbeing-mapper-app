name: Deploy Production Release to GitHub Releases

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Only trigger on production tags like v1.0.0 (no beta suffix)
      - 'v[0-9]+.[0-9]+.[0-9]+-[0-9]+' # Also support tags with build numbers like v1.0.0-123

permissions:
  contents: write
  packages: write

jobs:  
  build:
    runs-on: macos-latest # Use macOS for iOS builds
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version: '3.27.1' # Match your fvm version
    
    - name: Get version from tag
      id: version
      run: echo "content=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Check if this is a production release
      id: release_type
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        echo "Processing tag: $TAG"
        
        if [[ "$TAG" =~ -beta ]]; then
          echo "‚ùå ERROR: Beta tag detected in production workflow!"
          echo "Tag '$TAG' contains '-beta' suffix which should not trigger this workflow."
          echo "Beta tags should only trigger the 'CD-deploy-beta-releases.yml' workflow."
          echo "If you see this error, the workflow trigger patterns need to be updated."
          exit 1
        fi
        
        # Verify tag matches expected production pattern
        if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?$ ]]; then
          echo "‚ùå ERROR: Invalid production tag format!"
          echo "Expected format: v1.0.0 or v1.0.0-123 (semantic version with optional build number)"
          echo "Received: $TAG"
          exit 1
        fi
        
        echo "‚úÖ Confirmed valid production release tag: $TAG"
        echo "is_production=true" >> $GITHUB_OUTPUT

    - name: Validate version consistency
      run: |
        # Get version from pubspec.yaml (remove build number)
        PUBSPEC_VERSION=$(grep "version:" gauteng-wellbeing-mapper-app/pubspec.yaml | sed 's/version: //' | sed 's/+.*//' | tr -d ' ')
        
        # Get version from git tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        
        echo "pubspec.yaml version: $PUBSPEC_VERSION"
        echo "Git tag version: $TAG_VERSION"
        
        if [ "$PUBSPEC_VERSION" = "$TAG_VERSION" ]; then
          echo "‚úÖ Versions match!"
        else
          echo "‚ùå Version mismatch between pubspec.yaml ($PUBSPEC_VERSION) and git tag ($TAG_VERSION)"
          echo "Please update pubspec.yaml version to match the git tag"
          exit 1
        fi

    - name: Get flutter dependencies
      run: flutter pub get
      working-directory: gauteng-wellbeing-mapper-app

    - name: Verify iOS entitlements configuration
      run: |
        echo "üîç Verifying iOS entitlements are properly configured..."
        
        # Check entitlements file exists
        if [ ! -f "ios/Runner/Runner.entitlements" ]; then
          echo "‚ùå ERROR: Entitlements file missing!"
          exit 1
        fi
        
        # Check entitlements are linked in Xcode project
        if ! grep -q "CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements" ios/Runner.xcodeproj/project.pbxproj; then
          echo "‚ùå ERROR: Entitlements not linked in Xcode project!"
          exit 1
        fi
        
        # Count linked configurations
        ENTITLEMENT_COUNT=$(grep -c "CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements" ios/Runner.xcodeproj/project.pbxproj)
        if [ "$ENTITLEMENT_COUNT" -lt 3 ]; then
          echo "‚ùå ERROR: Entitlements not linked in all build configurations!"
          exit 1
        fi
        
        # Check location permissions in Info.plist
        REQUIRED_KEYS=("NSLocationAlwaysAndWhenInUseUsageDescription" "NSLocationAlwaysUsageDescription" "NSLocationWhenInUseUsageDescription" "NSLocationUsageDescription")
        for key in "${REQUIRED_KEYS[@]}"; do
          if ! grep -q "$key" ios/Runner/Info.plist; then
            echo "‚ùå ERROR: Missing location permission key: $key"
            exit 1
          fi
        done
        
        echo "‚úÖ iOS entitlements configuration verified"
      working-directory: gauteng-wellbeing-mapper-app

    - name: Statically analyze the Dart code for any errors
      run: flutter analyze
      working-directory: gauteng-wellbeing-mapper-app
    
    - name: Run tests for our flutter project
      run: flutter test --dart-define=FLUTTER_TEST_MODE=true
      working-directory: gauteng-wellbeing-mapper-app

    # Android Builds - Production Flavor
    - name: Build Android APKs (Production) - Multiple Architectures
      run: |
        echo "üì± Building Production Android APKs for multiple architectures..."
        
        # Build APKs for all supported architectures
        flutter build apk --release \
          --flavor=production \
          --dart-define=APP_FLAVOR=production \
          --split-per-abi
        
        echo "‚úÖ Production Android APKs built successfully!"
        echo "APK locations:"
        find build/app/outputs/flutter-apk/ -name "*.apk" -type f | sort
        echo "Listing all APK files:"
        ls -la build/app/outputs/flutter-apk/ || echo "APK directory not found"
      working-directory: gauteng-wellbeing-mapper-app

    - name: Build Android App Bundle (Production)
      run: |
        echo "üì¶ Building Production Android App Bundle..."
        flutter build appbundle --release \
          --flavor=production \
          --dart-define=APP_FLAVOR=production
        
        echo "‚úÖ Production App Bundle built successfully!"
        echo "AAB location:"
        ls -la build/app/outputs/bundle/productionRelease/app-production-release.aab || echo "AAB file not found"
      working-directory: gauteng-wellbeing-mapper-app

    # iOS Builds - Production Flavor
    - name: Install iOS dependencies
      run: cd ios && pod install && cd ..
      working-directory: gauteng-wellbeing-mapper-app
      
    - name: Build iOS (Production) - Unsigned for Distribution
      run: |
        echo "üçé Building iOS Production without code signing for distribution..."
        
        # Set the appropriate Info.plist for production flavor
        cp ios/Runner/Info-Production.plist ios/Runner/Info.plist
        echo "üìÑ Using Production Info.plist with bundle ID: com.github.activityspacelab.wellbeingmapper.gauteng"
        
        # Build iOS without code signing (for distribution only)
        flutter build ios --release \
          --dart-define=APP_FLAVOR=production \
          --no-codesign
        
        echo "‚úÖ iOS Production build complete (unsigned)!"
        echo "iOS build location:"
        ls -la build/ios/iphoneos/ || echo "iOS build directory not found"
        
        # Create a zip archive of the iOS app for distribution
        cd build/ios/iphoneos/
        zip -r ../../../wellbeing-mapper-production-ios.zip Runner.app/
        cd ../../../
        
        echo "üì¶ iOS app archived as wellbeing-mapper-production-ios.zip"
        echo "Note: This build is for distribution - actual App Store submission requires proper provisioning profiles and signing"
      working-directory: gauteng-wellbeing-mapper-app
    
    - name: Create a Production Release in GitHub
      uses: ncipollo/release-action@v1
      with:
        artifacts: |
          gauteng-wellbeing-mapper-app/build/app/outputs/flutter-apk/*.apk
          gauteng-wellbeing-mapper-app/build/app/outputs/bundle/productionRelease/app-production-release.aab
          gauteng-wellbeing-mapper-app/wellbeing-mapper-production-ios.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.version.outputs.content }}
        name: "Wellbeing Mapper ${{ steps.version.outputs.content }} - Production Release"
        body: |
          # üöÄ Wellbeing Mapper Production Release ${{ steps.version.outputs.content }}
          
          **This is the official production release of Wellbeing Mapper!**
          
          ## üì± What is Wellbeing Mapper?
          Wellbeing Mapper helps you track your mental wellbeing and movement patterns. This production version offers both private personal use and research participation options.
          
          ## üî• What's New in This Release
          - Stable production build with full testing
          - Enhanced privacy controls and data protection
          - Improved user interface and experience
          - Comprehensive location and survey features
          - Research participation capabilities (optional)
          
          ## üì≤ How to Download and Install
          
          ### Android Users
          **Download one of the production APK files below:**
          - Choose any `app-production-*.apk` file (Flutter automatically optimizes for your device architecture)
          - All APK variants work on modern Android devices - download any one
          
          **Installation steps:**
          1. Download any APK file from the Assets section below
          2. Enable "Install unknown apps" in your device's security settings
          3. Tap the APK file and follow the installation prompts
          4. Open Wellbeing Mapper and choose your preferred mode
          
          ### Android App Bundle
          The `app-production-release.aab` file is for Google Play Store distribution.
          
          ### iOS Users
          **iOS builds are included but require proper signing for installation:**
          - Download `wellbeing-mapper-production-ios.zip` which contains the unsigned iOS app
          - iOS builds in this release are unsigned (for distribution purposes)
          - For device installation, contact the research team for TestFlight access
          - App Store distribution requires additional signing and review process
          - Developers can re-sign the build with their own provisioning profiles
          
          ## üîí Privacy & Data Protection
          - **Private Mode**: All data stays securely on your device
          - **Research Mode**: Optional data sharing with explicit consent
          - **No Tracking**: No advertising or third-party analytics
          - **Your Control**: Delete all data anytime from app settings
          
          ## üÜö Production vs Beta
          This is the **stable production release** - recommended for:
          - ‚úÖ Regular users wanting reliable functionality
          - ‚úÖ Research participants in official studies
          - ‚úÖ Long-term personal wellbeing tracking
          
          For testing new features, see our beta releases with `-beta` tags.
          
          ## ÔøΩ Support & Feedback
          - üìß Email: john.palmer@upf.edu
          - üìñ Full Documentation: [User Guide](https://github.com/ActivitySpaceLab/gauteng-wellbeing-mapper-app/blob/main/docs/USER_GUIDE.md)
          - üêõ Report Issues: Use GitHub Issues or in-app feedback
          
          ## üì¶ What's Included
          - ‚úÖ Multiple Production Android APKs (automatically optimized for different devices)
          - ‚úÖ Android App Bundle for Play Store
          - ‚úÖ iOS app archive ready for App Store submission or re-signing
          - ‚úÖ Full test coverage and quality assurance
          - ‚úÖ Complete privacy and security implementations
        draft: false
        prerelease: false