// Mocks generated by Mockito 5.4.5 from annotations
// in wellbeing_mapper/test/location_selection_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:wellbeing_mapper/db/survey_database.dart' as _i3;
import 'package:wellbeing_mapper/models/consent_models.dart' as _i6;
import 'package:wellbeing_mapper/models/data_sharing_consent.dart' as _i8;
import 'package:wellbeing_mapper/models/survey_models.dart' as _i5;
import 'package:wellbeing_mapper/services/data_upload_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SurveyDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSurveyDatabase extends _i1.Mock implements _i3.SurveyDatabase {
  MockSurveyDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertInitialSurvey(_i5.InitialSurveyResponse? survey) =>
      (super.noSuchMethod(
            Invocation.method(#insertInitialSurvey, [survey]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.InitialSurveyResponse>> getInitialSurveys() =>
      (super.noSuchMethod(
            Invocation.method(#getInitialSurveys, []),
            returnValue: _i4.Future<List<_i5.InitialSurveyResponse>>.value(
              <_i5.InitialSurveyResponse>[],
            ),
          )
          as _i4.Future<List<_i5.InitialSurveyResponse>>);

  @override
  _i4.Future<int> insertRecurringSurvey(_i5.RecurringSurveyResponse? survey) =>
      (super.noSuchMethod(
            Invocation.method(#insertRecurringSurvey, [survey]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.RecurringSurveyResponse>> getRecurringSurveys() =>
      (super.noSuchMethod(
            Invocation.method(#getRecurringSurveys, []),
            returnValue: _i4.Future<List<_i5.RecurringSurveyResponse>>.value(
              <_i5.RecurringSurveyResponse>[],
            ),
          )
          as _i4.Future<List<_i5.RecurringSurveyResponse>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getPendingSyncItems() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingSyncItems, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> markSynced(int? syncId) =>
      (super.noSuchMethod(
            Invocation.method(#markSynced, [syncId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> markSurveyAsSynced(String? tableName, int? recordId) =>
      (super.noSuchMethod(
            Invocation.method(#markSurveyAsSynced, [tableName, recordId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> hasCompletedInitialSurvey() =>
      (super.noSuchMethod(
            Invocation.method(#hasCompletedInitialSurvey, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<DateTime?> getLastRecurringSurveyDate() =>
      (super.noSuchMethod(
            Invocation.method(#getLastRecurringSurveyDate, []),
            returnValue: _i4.Future<DateTime?>.value(),
          )
          as _i4.Future<DateTime?>);

  @override
  _i4.Future<int> getRecurringSurveyCount() =>
      (super.noSuchMethod(
            Invocation.method(#getRecurringSurveyCount, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> insertConsent(_i6.ConsentResponse? consent) =>
      (super.noSuchMethod(
            Invocation.method(#insertConsent, [consent]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i6.ConsentResponse?> getConsent() =>
      (super.noSuchMethod(
            Invocation.method(#getConsent, []),
            returnValue: _i4.Future<_i6.ConsentResponse?>.value(),
          )
          as _i4.Future<_i6.ConsentResponse?>);

  @override
  _i4.Future<int> insertLocationTrack(Map<String, dynamic>? locationData) =>
      (super.noSuchMethod(
            Invocation.method(#insertLocationTrack, [locationData]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i7.LocationTrack>> getLocationTracksSince(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#getLocationTracksSince, [since]),
            returnValue: _i4.Future<List<_i7.LocationTrack>>.value(
              <_i7.LocationTrack>[],
            ),
          )
          as _i4.Future<List<_i7.LocationTrack>>);

  @override
  _i4.Future<List<_i7.LocationTrack>> getAllLocationTracks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllLocationTracks, []),
            returnValue: _i4.Future<List<_i7.LocationTrack>>.value(
              <_i7.LocationTrack>[],
            ),
          )
          as _i4.Future<List<_i7.LocationTrack>>);

  @override
  _i4.Future<void> markLocationTracksAsSynced(List<int>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#markLocationTracksAsSynced, [ids]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> insertDataSharingConsent(_i8.DataSharingConsent? consent) =>
      (super.noSuchMethod(
            Invocation.method(#insertDataSharingConsent, [consent]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i8.DataSharingConsent?> getLatestDataSharingConsent(
    String? participantUuid,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLatestDataSharingConsent, [participantUuid]),
            returnValue: _i4.Future<_i8.DataSharingConsent?>.value(),
          )
          as _i4.Future<_i8.DataSharingConsent?>);

  @override
  _i4.Future<List<_i8.DataSharingConsent>> getAllDataSharingConsents(
    String? participantUuid,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAllDataSharingConsents, [participantUuid]),
            returnValue: _i4.Future<List<_i8.DataSharingConsent>>.value(
              <_i8.DataSharingConsent>[],
            ),
          )
          as _i4.Future<List<_i8.DataSharingConsent>>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
